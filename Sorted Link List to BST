Given a Singly Linked List which has data members sorted in ascending order. Construct a Balanced Binary Search Tree which has same data members as the given Linked List.
Note: There might be nodes with the same value.

Example 1:

Input:
Linked List: 1->2->3->4->5->6->7
Output:
4 2 1 3 6 5 7
Explanation :
The BST formed using elements of the 
linked list is,
        4
      /   \
     2     6
   /  \   / \
  1   3  5   7  
Hence, preorder traversal of this 
tree is 4 2 1 3 6 5 7
Example 2:

Input:
Linked List : 1->2->3->4
Ouput:
3 2 1 4
Explanation:
The BST formed using elements of the 
linked list is,
      3   
    /  \  
   2    4 
 / 
1
Hence, the preorder traversal of this 
tree is 3 2 1 4





class ListNode:
    def __init__(self, val):
        self.val = val
        self.next = None

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def sortedListToBST(head):
    if not head:
        return None
    
    # Find the middle of the linked list
    slow, fast = head, head
    prev = None
    
    while fast and fast.next:
        prev = slow
        slow = slow.next
        fast = fast.next.next
    
    # Break the linked list into two parts
    if prev:
        prev.next = None
    
    # Create the root of the BST
    root = TreeNode(slow.val)
    
    # Recursively build the left and right subtrees
    if slow != head:
        root.left = sortedListToBST(head)
    root.right = sortedListToBST(slow.next)
    
    return root

def preorderTraversal(root):
    if not root:
        return []
    return [root.val] + preorderTraversal(root.left) + preorderTraversal(root.right)

# Convert the sorted linked list to a BST
linked_list = ListNode(1)
linked_list.next = ListNode(2)
linked_list.next.next = ListNode(3)
linked_list.next.next.next = ListNode(4)

root = sortedListToBST(linked_list)

# Print the preorder traversal of the resulting BST
print(preorderTraversal(root))  # Output: [3, 2, 1, 4]
